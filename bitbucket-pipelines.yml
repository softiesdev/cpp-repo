# Template C++ Application

# This template allows you to validate your C++ application.
# The workflow allows running tests and code linting on the default branch.

image: gcc:latest

clone:
  depth: full # SonarCloud scanner needs the full history to assign issues properly

pipelines:
  default:
    - parallel:
        - step:
            name: Build
            script:
              - apt update && apt install cmake -y
              # Execute your C++ application after compilation to check success
              - cmake -S . -B build
              - cmake --build build --target cpp_repo
        - step:
            name: Test
            script:
              - apt update && apt install cmake -y
              # Execute your C++ application after compilation to check success
              - cmake -S . -B build
              - export SONAR_SCANNER_VERSION=5.0.1.3006
              - export SONAR_SCANNER_HOME=$HOME/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION-linux
              - export BW_OUTPUT=$HOME/.sonar/bw-output
              - mkdir -p $BW_OUTPUT
              - curl --create-dirs -sSLo $HOME/.sonar/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux.zip
              - unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
              - export PATH=$SONAR_SCANNER_HOME/bin:$PATH
              - curl --create-dirs -sSLo $HOME/.sonar/build-wrapper-linux-x86.zip https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip
              - unzip -o $HOME/.sonar/build-wrapper-linux-x86.zip -d $HOME/.sonar/
              - export PATH=$HOME/.sonar/build-wrapper-linux-x86:$PATH
              - build-wrapper-linux-x86-64 --out-dir $BW_OUTPUT cmake --build build --target cpp_repo_test
              - sonar-scanner -Dsonar.cfamily.build-wrapper-output=$BW_OUTPUT
              - cd build && ctest .
